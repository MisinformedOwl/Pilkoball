/* autogenerated by Processing revision 1293 on 2024-05-28 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Pilkoball extends PApplet {

ArrayList<MoneyBall> balls = new ArrayList<MoneyBall>();
ArrayList<peg> pegs = new ArrayList<peg>();
ArrayList<goal> goals = new ArrayList<goal>();


public void setup() {
  int spacerValue = 80;
  /* size commented out by preprocessor */;
  PImage icon = loadImage("source/icon.png");
  surface.setIcon(icon);
  background(0);
  noStroke();
  rotate(180);

  int leng = 12;

  for (int y = 3; y < 12; y++) {
    for (int x = 0; x < y*spacerValue; x+=spacerValue) {
      pegs.add(new peg((width/2-(y*spacerValue)/2)+spacerValue/2 + x, (y-2)*spacerValue+spacerValue));
    }
  }

  float[] values = {5.6f, 2, 1.3f, 0.7f, 0.2f, 0.2f, 0.7f, 1.3f, 2, 5.6f};



  for (int a = 0; a < leng-2; a++) {
    goals.add(new goal((int)((a*spacerValue))+spacerValue+30,
      (leng-2)*spacerValue+spacerValue/2,
      values[a],
      color(255-values[a]*100, values[a]*100, 0)));
  }
}

float betting = 1000;
float score = 10000;

public void mouseWheel(MouseEvent event) {
  int e = -event.getCount();
  if (e == 1 && betting < score) {
    betting += 100;
  } else if (e == -1 && betting >0) {
    betting -= 100;
  }
}

public void mouseClicked(MouseEvent event) {
  if(mouseButton == 3){
    betting = score;
    return;
  }
  
  if (betting <= 0) {
    return;
  }
  if (score >=betting) {
    balls.add(new MoneyBall(random(width/2-50, width/2+50), 50, color(255*(1-betting/score), 255*(betting/score), 0), betting));
    score -= betting;
  }
}

int spawnerCounter = 0;

public void draw() {
  fill(0, 140);
  rect(0, 0, width, height);
  for (int b = 0; b < balls.size(); b++) {
    balls.get(b).run();
    if (balls.get(b).dead) {
      balls.remove(b);
    }
  }
  for (peg p : pegs) {
    p.draw();
  }
  for (goal g : goals) {
    g.draw();
  }
  textSize(40);
  fill(color(255, 255, 255));
  text("Bank: £"+score, 0, 40);
  text("Betting: £" + betting, width-400, 40);
  textSize(20);
}
class goal{
  String valueTitle;
  float value;
  int col;
  int x,y;
  int len = 70;
  int hei = this.len/2;
  boolean hit = false;
  float sin;
  int sinCount = 0;
  int sinLimit = 10;
  float shader = 0.7f;
  int hitCounter = 0;
  
  
  public goal(int x, int y, float value, int col){
    this.value = value;
    this.valueTitle = String.valueOf(value) + "x";
    this.col = col;
    this.x = x;
    this.y = y;
  }
  
  public boolean collision(MoneyBall b){
    float ydiff = abs(this.y - b.y);
    
    if (ydiff < this.hei/2){
      if (b.x >this.x && b.x < this.x+this.len){
        this.hitCounter++;
        this.hit = true;
        return true;
      }
    }
    return false;
  }
  
  public void draw(){
    if (this.hit){ this.moving(); }
    fill(color(red(this.col)*shader, green(this.col)*shader, blue(this.col)*shader));
    rect(this.x,this.y+this.sin+7,len,hei, 6);
    fill(this.col);
    rect(this.x,this.y+this.sin,len,hei, 6);
    fill(color(0,0,0));
    text(valueTitle, this.x+this.len / 5, (this.y + this.hei - this.hei / 3)+ this.sin);
  }
  
  private void moving(){
    this.sinCount++;
    this.sin = sin(sinCount/3)*10;
    if (sinCount > sinLimit){
      this.hit = false;
      this.sin = 0.0f;
      sinCount = 0;
    }
  }
}
class MoneyBall {
  float x, y = 0;
  float prevX, prevY = 0;
  int size = 30;
  float velx = 0;
  float vely = 0;
  int col;
  float bounce = 0.7f;
  boolean dead = false;
  float value;
  float weight = 0.4f;
  
  public MoneyBall(float x, float y, int col, float value){
    this.x = x;
    this.y = y;
    this.col = col;
    this.value = value;
  }
  
  private void pegCheck(){
    for (peg p : pegs){
      if (p.collided(this.x, this.y, this.size)){
        this.collision(p);
      } else {
        this.saveCords();
      }
    }
    for (goal g : goals){
      if(g.collision(this)){
        this.scored(g);
      }
    }
  }
  
  private void scored(goal g){
    this.dead = true;
    
    score+=this.value*g.value;
  }
  
  private void preCollision(){
    this.x = this.prevX;
    this.y = this.prevY;
  }
  
  private void fall(){
    this.x += this.velx;
    this.y += this.vely;
    this.vely +=this.weight;
  }
  
  private void saveCords(){
    this.prevX = this.x;
    this.prevY = this.y;
  }
  
  private void collision(peg p){
    int dist = (this.size/2+p.size/2);
    float yvel = (this.y - p.y)/dist;
    float xvel = (this.x - p.x)/dist;
    
    if (this.velx > 0){
    this.velx = ((this.velx * xvel) + (this.vely * xvel)/2.2f)*bounce;
    } else {
    this.velx = ((-this.velx * xvel) + (this.vely * xvel)/2.2f)*bounce;
    }
    this.vely = (this.vely * -abs(yvel))*bounce;
    this.preCollision();
    this.fall();
  }

  public void run(){
    this.create();
    this.pegCheck();
    this.fall();
    this.kill();
  }
  
  public void create(){
    fill(this.col);
    ellipse(this.x,this.y,this.size,this.size);
  }
  
  public void kill(){
    if(this.x > width || this.y > height || this.y < 0){
      this.dead = true;
    }
  }
}
class peg{
  float x, y = 0;
  int size = 18;
  ArrayList<peghit> hits = new ArrayList<peghit>();
  
  public peg(int x, int y){
    this.x = x;
    this.y = y;
  }
  
  public boolean collided(float x2, float y2, int size){
    float xdiff = abs(this.x - x2);
    float ydiff = abs(this.y - y2);
    xdiff = xdiff*xdiff;
    ydiff = ydiff*ydiff;
    float pythag = xdiff+ydiff;
    pythag = sqrt(pythag)*2;
    if (pythag < size + this.size){
      hits.add(new peghit(this.x,this.y,this.size));
      return true;
    } else {
      return false;
    }
  }
  
  public void draw(){
    fill(130);
    ellipse(this.x,this.y,this.size,this.size);
    for(int p = 0; p < hits.size(); p++){
      if(hits.get(p).run()){
        hits.remove(p);
      }
    }
  }
}

class peghit{
  float x,y;
  float size;
  int lifetime = 20;
  int counter = 0;
  
  public peghit(float x, float y, float size){
    this.x = x;
    this.y = y;
    this.size = size;
  }
  
  public boolean run(){
    size+=1;
    counter+=1;
    fill(200, 255-((255/this.lifetime)*counter));
    ellipse(this.x, this.y, this.size,this.size);
    if (counter == lifetime){
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(1000, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Pilkoball" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
